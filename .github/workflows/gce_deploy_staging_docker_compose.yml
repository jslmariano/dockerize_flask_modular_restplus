# Copyright 2020 Google, LLC.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: GCE SSH GIT CLONE DOCKER COMPOSE

on:
  push:
    branches:
    - deploy/**

env:
  PROJECT_ID: ${{ secrets.GCE_PROJECT }}
  # TODO: update to instance name
  APP_DIR_PARENT: /var/www
  APP_DIR: app
  VPC_NETWORK: batcave
  VPC_SUBNET: bc-asia-east1
  REGION: asia-east1
  ZONE: asia-east1-b
  STAGING_NAME: staging-docker
  STAGING_ALLOW_TAG: allow-ssh-staging-from-github
  # You should remember this port, if not remembered,
  # Go to your GCP firewall rules and check tcp value,
  # or just re-create new STAGING_CUSTOM_SSH_PORT in GITHUB SECRETS
  STAGING_CUSTOM_SSH_PORT: ${{ secrets.STAGING_CUSTOM_SSH_PORT }}

jobs:
  ssh-git-clone-docker-compose:
    name: SSH, Git Clone, and Docker Compose
    runs-on: ubuntu-latest
    timeout-minutes: 5

    steps:

    - name: Checkout
      uses: actions/checkout@v2

    - name: Extract branch name
      shell: bash
      id: extract_branch
      run: |-
        echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/deploy/})"

    # Preview
    - name: Preview current branch
      run: |-
        echo "current branch:  ${{ steps.extract_branch.outputs.branch }}"

    # Github IP
    - name: Getting github ip
      shell: bash
      id: github_ip
      run: |-
        echo "##[set-output name=ip;]$(echo $(dig +short myip.opendns.com @resolver1.opendns.com))"

    # Setup gcloud CLI
    - uses: GoogleCloudPlatform/github-actions/setup-gcloud@master
      with:
        version: '286.0.0'
        service_account_email: ${{ secrets.GCE_SA_EMAIL }}
        service_account_key: ${{ secrets.GCE_SA_KEY }}
        project_id: ${{ secrets.GCE_PROJECT }}

    - name: Getting staging vm status
      shell: bash
      id: staging_vm_status
      run: |-
        export result=$(gcloud compute instances list \
                  --filter="name:($STAGING_NAME)" \
                  --format="value(status)")
        echo "##[set-output name=status;]$(echo $result)"

    # Preview status
    - name: Preview staging status
      run: |-
        echo "current status:  ${{ steps.staging_vm_status.outputs.status }}"

    # SSH port patcher
    - name: Build patch for custom ssh port
      shell: bash
      id: ssh_custom_port
      run: |-
        export result="sed -re 's/^(\#?)(Port)([[:space:]]+)([[:digit:]]+)/\2\3$STAGING_CUSTOM_SSH_PORT/' -i.`date -I` /etc/ssh/sshd_config"
        echo "##[set-output name=patch_command;]$(echo $result)"

    # Start instance
    - name: Prepare staging instance
      id: prepare_staging
      env:
        STAGING_STATUS: ${{ steps.staging_vm_status.outputs.status }}
        STAGING_MACHINE_TYPE: n1-standard-4 # Change prior to specs
      run: |-

        if [ -z "$STAGING_STATUS" ]; then
          echo "Staging vm does not exist!, now creating..."
          gcloud compute instances create $STAGING_NAME \
            --project=$PROJECT_ID \
            --zone=$ZONE \
            --machine-type=$STAGING_MACHINE_TYPE \
            --network=$VPC_NETWORK \
            --subnet=$VPC_SUBNET \
            --tags=allow-ssh-bastion,$STAGING_ALLOW_TAG \
            --metadata=block-project-ssh-keys=true \
            --image=debian-9-stretch-v20200420 \
            --image-project=debian-cloud \
            --scopes=https://www.googleapis.com/auth/cloud-platform \
            --boot-disk-size=10GB \
            --boot-disk-type=pd-ssd \
            --boot-disk-device-name=$STAGING_NAME \
            --reservation-affinity=any
        fi

        echo "Saving old metadata [startup-script] ..."
        export old_startup_script=$(gcloud compute instances describe staging-docker \
            --project $PROJECT_ID --zone $ZONE \
            --format='value[](metadata.items.startup-script)')
        echo "##[set-output name=old_startup_script;]$(echo $old_startup_script)"

        echo "Updating staging metadata [startup-script] for patching ssh custom port..."
        gcloud compute instances add-metadata $STAGING_NAME \
            --project $PROJECT_ID --zone $ZONE \
            --metadata startup-script="${{ steps.ssh_custom_port.outputs.patch_command }}"

        echo "Rebooting staging instance.."
        # gcloud compute instances stop $STAGING_NAME --project $PROJECT_ID --zone $ZONE
        # gcloud compute instances start $STAGING_NAME --project $PROJECT_ID --zone $ZONE

        echo "Done preparing staging instance"

    - name: Getting staging vm external ip
      shell: bash
      id: staging_vm_ip
      run: |-
        export result=$(gcloud compute instances describe $STAGING_NAME \
                --zone=$ZONE \
                --format="value(networkInterfaces.accessConfigs[0].natIP)")
        echo "##[set-output name=nat_ip;]$(echo $result)"

    - name: Getting staging firewall status
      shell: bash
      id: staging_firewall_status
      run: |-
        export result=$(gcloud compute firewall-rules list \
                --filter="name:($STAGING_ALLOW_TAG)" \
                --format="value(disabled)")
        echo "##[set-output name=disabled;]$(echo $result)"

    # Patch firewall
    - name: Patching up staging firewall
      env:
        STAGING_FIREWALL_DISABLED: ${{ steps.staging_firewall_status.outputs.disabled }}
        STAGING_IP: ${{ steps.staging_vm_ip.outputs.nat_ip }}
        TEMP_IP: ${{ steps.github_ip.outputs.ip }}
      run: |-

        if [[ -z $STAGING_IP ]]; then
            echo "ERROR! Missing staging external ip!"
            exit 1
        fi

        if [ -z "$STAGING_FIREWALL_DISABLED" ]; then
            echo "Staging firewall does not exists!, now creating..."
            gcloud compute firewall-rules create $STAGING_ALLOW_TAG \
              --allow=tcp:$STAGING_CUSTOM_SSH_PORT \
              --description='Allow ssh from github' \
              --enable-logging \
              --network=$VPC_NETWORK \
              --source-ranges=$STAGING_IP \
              --target-tags=$STAGING_ALLOW_TAG
        fi

        if [[ $STAGING_FIREWALL_DISABLED == "True" ]]; then
            echo "Staging firewall is disabled, now enabling...."
            gcloud compute firewall-rules update $STAGING_ALLOW_TAG \
              --no-disabled
        fi

        echo "Patching staging firewall.."
        gcloud compute firewall-rules update $STAGING_ALLOW_TAG \
              --source-ranges $STAGING_IP,$TEMP_IP \
              --allow tcp:$STAGING_CUSTOM_SSH_PORT
        echo "Done patching staging firewall.."

    - name: Getting current repository
      shell: bash
      id: current_repo
      run: |-
        export result="https://${{ github.repository_owner }}:${{ secrets.GPAT }}@github.com/${{ github.repository }}.git"
        echo "##[set-output name=auth_url]$(echo $result)"

    # DIR test
    - name: Directory vairable tests
      if: always()
      env:
        s_command: |-
          echo "DIR TEST" &&
          echo "echo dir variable" &&
          echo $APP_DIR_PARENT &&
          echo "echo dir variable with single quote" &&
          echo '$APP_DIR_PARENT' &&
          echo "echo dir variable with double quote" &&
          echo "$APP_DIR_PARENT" &&
          echo "Done DIR TEST"
      run: |-
        gcloud compute ssh $STAGING_NAME --project $PROJECT_ID --zone $ZONE --ssh-flag="-p $STAGING_CUSTOM_SSH_PORT" -- $s_command

    # VARIABLE
    - name: TEST change directory with variable only
      if: always()
      env:
        s_command: |-
          echo "Testing ...." &&
          cd $APP_DIR_PARENT &&
          echo "Curren directory is $(pwd)" &&
          echo "Curren directory lists" &&
          ls -al &&
          echo "Done Testing ...."
      run: |-
        gcloud compute ssh $STAGING_NAME --project $PROJECT_ID --zone $ZONE --ssh-flag="-p $STAGING_CUSTOM_SSH_PORT" -- $s_command

    # VARIABLE single quote
    - name: TEST change directory with variable single quote
      if: always()
      env:
        s_command: |-
          echo "Testing ...." &&
          cd '$APP_DIR_PARENT' &&
          echo "Curren directory is $(pwd)" &&
          echo "Curren directory lists" &&
          ls -al &&
          echo "Done Testing ...."
      run: |-
        gcloud compute ssh $STAGING_NAME --project $PROJECT_ID --zone $ZONE --ssh-flag="-p $STAGING_CUSTOM_SSH_PORT" -- $s_command

    # VARIABLE double quote
    - name: TEST change directory with variable double quote
      if: always()
      env:
        s_command: |-
          echo "Testing ...." &&
          cd "$APP_DIR_PARENT" &&
          echo "Curren directory is $(pwd)" &&
          echo "Curren directory lists" &&
          ls -al &&
          echo "Done Testing ...."
      run: |-
        gcloud compute ssh $STAGING_NAME --project $PROJECT_ID --zone $ZONE --ssh-flag="-p $STAGING_CUSTOM_SSH_PORT" -- $s_command

    # VARIABLE double quote
    - name: TEST change directory with eval variable interpolation
      if: always()
      env:
        s_command: |-
          echo "Testing ...." &&
          eval cd "${APP_DIR_PARENT}" &&
          echo "Curren directory is $(pwd)" &&
          echo "Curren directory lists" &&
          ls -al &&
          echo "Done Testing ...."
      run: |-
        gcloud compute ssh $STAGING_NAME --project $PROJECT_ID --zone $ZONE --ssh-flag="-p $STAGING_CUSTOM_SSH_PORT" -- $s_command

    # VARIABLE double quote
    - name: TEST change directory with variable echo substition
      if: always()
      env:
        s_command: |-
          echo "Testing ...." &&
          cd "$(echo $APP_DIR_PARENT)" &&
          echo "Curren directory is $(pwd)" &&
          echo "Curren directory lists" &&
          ls -al &&
          echo "Done Testing ...."
      run: |-
        gcloud compute ssh $STAGING_NAME --project $PROJECT_ID --zone $ZONE --ssh-flag="-p $STAGING_CUSTOM_SSH_PORT" -- $s_command

    # VARIABLE double quote
    - name: TEST change directory with variable echo substition and pipe
      if: always()
      env:
        s_command: |-
          echo "Testing ...." &&
          cd $(echo $APP_DIR_PARENT | tr -d '\r') &&
          echo "Curren directory is $(pwd)" &&
          echo "Curren directory lists" &&
          ls -al &&
          echo "Done Testing ...."
      run: |-
        gcloud compute ssh $STAGING_NAME --project $PROJECT_ID --zone $ZONE --ssh-flag="-p $STAGING_CUSTOM_SSH_PORT" -- $s_command

    # VARIABLE double quote
    - name: TEST cd ${APP_DIR_PARENT}
      if: always()
      env:
        s_command: |-
          echo "Testing ...." &&
          cd ${APP_DIR_PARENT} &&
          echo "Curren directory is $(pwd)" &&
          echo "Curren directory lists" &&
          ls -al &&
          echo "Done Testing ...."
      run: |-
        gcloud compute ssh $STAGING_NAME --project $PROJECT_ID --zone $ZONE --ssh-flag="-p $STAGING_CUSTOM_SSH_PORT" -- $s_command

    # Calibrating directory
    - name: End testing
      if: always()
      run: |-
        exit 1

    # Update machine
    # NOTE: This is an overhead on 1st run, we might need to work around this
    - name: Update machine
      env:
        s_command: |-
          sudo apt install apt-transport-https ca-certificates curl software-properties-common gnupg2 -y &&
          sudo curl -fsSL https://download.docker.com/linux/debian/gpg | sudo apt-key add - &&
          sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/debian $(lsb_release -cs) stable" &&
          sudo apt-get update -y &&
          sudo apt-get upgrade -y &&
          sudo apt-get install git -y &&
          sudo apt-get install docker-ce -y &&
          sudo usermod -aG docker root &&
          sudo curl -L "https://github.com/docker/compose/releases/download/1.25.5/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose &&
          sudo chmod +x /usr/local/bin/docker-compose &&
          sudo ln -sf /usr/local/bin/docker-compose /usr/bin/docker-compose &&
          sudo docker -v &&
          sudo docker-compose --version
      run: |-
        gcloud compute ssh $STAGING_NAME --project $PROJECT_ID --zone $ZONE --ssh-flag="-p $STAGING_CUSTOM_SSH_PORT" -- $s_command

    # Clone or pull repositor on machine
    - name: Update local repository
      env:
        s_command: |-
          sudo rm -rf /var/www/app &&
          echo ${{ steps.current_repo.outputs.auth_url }} &&
          echo "Cloning repository" &&
          sudo git clone -b ${{ steps.extract_branch.outputs.branch }} --single-branch ${{ steps.current_repo.outputs.auth_url }} /var/www/app &&
          echo "Done Cloning repository"
      run: |-
        gcloud compute ssh $STAGING_NAME --project $PROJECT_ID --zone $ZONE --ssh-flag="-p $STAGING_CUSTOM_SSH_PORT" -- $s_command


    # Docker compose
    - name: Build docker stacks
      env:
        s_command: |-
          ls -al &&
          sudo chmod 777 -R '$APP_DIR_PARENT/' &&
          cd '/var/www/app' &&
          ls -al &&
          echo "Building docker stacks..." &&
          sudo docker-compose build &&
          sudo docker-compose up -d &&
          echo "Done Building docker stacks..." &&
          sudo docker ps -a &&
          sudo docker-compose down
      run: |-
        gcloud compute ssh $STAGING_NAME --project $PROJECT_ID --zone $ZONE --ssh-flag="-p $STAGING_CUSTOM_SSH_PORT" -- $s_command

    # Custom Post Process
    - name: Cleaning up
      if: always()
      run: |-
        echo "Closing down firewall for github"
        gcloud compute firewall-rules update $STAGING_ALLOW_TAG --source-ranges ${{ steps.staging_vm_ip.outputs.nat_ip }}
        gcloud compute firewall-rules update $STAGING_ALLOW_TAG --disabled
        echo "Updating staging metadata [startup-script] from it's old value..."
        gcloud compute instances add-metadata $STAGING_NAME \
            --project $PROJECT_ID --zone $ZONE \
            --metadata startup-script="${{ steps.prepare_staging.outputs.old_startup_script }}"
        echo "Custom clean up done"

