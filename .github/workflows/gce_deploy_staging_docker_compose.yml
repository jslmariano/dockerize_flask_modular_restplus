# Copyright 2020 Google, LLC.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: GCE create staging vm and deploy app with docker compose

on:
  push:
    branches:
    - deploy/**

env:
  PROJECT_ID: ${{ secrets.GCE_PROJECT }}
  # TODO: update to instance name
  VPC_NETWORK: batcave
  VPC_SUBNET: bc-asia-east1
  REGION: asia-east1
  ZONE: asia-east1-b
  STAGING_NAME: staging-docker
  STAGING_ALLOW_TAG: allow-ssh-staging-from-github
  # You should remember this port, if not remembered,
  # Go to your GCP firewall rules and check tcp value,
  # or just re-create new STAGING_CUSTOM_SSH_PORT in GITHUB SECRETS
  STAGING_CUSTOM_SSH_PORT: ${{ secrets.STAGING_CUSTOM_SSH_PORT }}

jobs:
  create-staging-ssh-deploy:
    name: Create, Staging, SSH, and Deploy
    runs-on: ubuntu-latest
    timeout-minutes: 3

    steps:

    - name: Checkout
      uses: actions/checkout@v2

    - name: Extract branch name
      shell: bash
      id: extract_branch
      run: |-
        echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/deploy/})"

    # Preview
    - name: Preview current branch
      run: |-
        echo "current branch:  ${{ steps.extract_branch.outputs.branch }}"

    # Github IP
    - name: Getting github ip
      shell: bash
      id: github_ip
      run: |-
        echo "##[set-output name=ip;]$(echo $(dig +short myip.opendns.com @resolver1.opendns.com))"

    # Setup gcloud CLI
    - uses: GoogleCloudPlatform/github-actions/setup-gcloud@master
      with:
        version: '286.0.0'
        service_account_email: ${{ secrets.GCE_SA_EMAIL }}
        service_account_key: ${{ secrets.GCE_SA_KEY }}
        project_id: ${{ secrets.GCE_PROJECT }}

    - name: Getting staging vm status
      shell: bash
      id: staging_vm_status
      run: |-
        export result=$(gcloud compute instances list \
                  --filter="name:($STAGING_NAME)" \
                  --format="value(status)")
        echo "##[set-output name=status;]$(echo $result)"

    # Preview status
    - name: Preview staging status
      run: |-
        echo "current status:  ${{ steps.staging_vm_status.outputs.status }}"

    # Start instance
    - name: Bringing up staging instance
      run: |-
        export STAGING_STATUS=${{ steps.staging_vm_status.outputs.status }}

        if [ -z "$STAGING_STATUS" ]; then
          echo "Staging vm does not exist!, now creating..."
          gcloud compute instances create $STAGING_NAME \
            --project=$PROJECT_ID \
            --zone=$ZONE \
            --machine-type=n1-standard-4 \
            --network=$VPC_NETWORK \
            --subnet=$VPC_SUBNET \
            --tags=$STAGING_ALLOW_TAG \
            --metadata=block-project-ssh-keys=true \
            --image=debian-9-stretch-v20200420 \
            --image-project=debian-cloud \
            --scopes=https://www.googleapis.com/auth/cloud-platform \
            --boot-disk-size=10GB \
            --boot-disk-type=pd-ssd \
            --boot-disk-device-name=$STAGING_NAME \
            --reservation-affinity=any
        fi

        if [[ $STAGING_STATUS != "RUNNING" ]]; then
            echo "Staging status stopped, now starting...."
            gcloud compute instances start $STAGING_NAME --project $PROJECT_ID --zone $ZONE
        fi
        echo "Done bringing up instance"

    - name: Getting staging vm external ip
      shell: bash
      id: staging_vm_ip
      run: |-
        export result=$(gcloud compute instances describe $STAGING_NAME \
                --zone=$ZONE \
                --format="value(networkInterfaces.accessConfigs[0].natIP)")
        echo "##[set-output name=nat_ip;]$(echo $result)"

    - name: Getting staging firewall status
      shell: bash
      id: staging_firewall_status
      run: |-
        export result=$(gcloud compute firewall-rules list \
                --filter="name:($STAGING_ALLOW_TAG)" \
                --format="value(disabled)")
        echo "##[set-output name=disabled;]$(echo $result)"

    # Patch firewall
    - name: Patching up staging firewall
      run: |-
        export STAGING_FIREWALL_DISABLED=${{ steps.staging_firewall_status.outputs.disabled }}
        export STAGING_IP=${{ steps.staging_vm_ip.outputs.nat_ip }}
        export TEMP_IP=${{ steps.github_ip.outputs.ip }}

        if [[ -z $STAGING_IP ]]; then
            echo "ERROR! Missing staging external ip!"
            exit 1
        fi

        if [ -z "$STAGING_FIREWALL_DISABLED" ]; then
            echo "Staging firewall does not exists!, now creating..."
            gcloud compute firewall-rules create $STAGING_ALLOW_TAG \
              --allow=tcp:$STAGING_CUSTOM_SSH_PORT \
              --description='Allow ssh from github' \
              --enable-logging \
              --network=$VPC_NETWORK \
              --source-ranges=$STAGING_IP \
              --target-tags=$STAGING_ALLOW_TAG
        fi

        if [[ $STAGING_FIREWALL_DISABLED == "True" ]]; then
            echo "Staging firewall is disabled, now enabling...."
            gcloud compute firewall-rules update $STAGING_ALLOW_TAG \
              --no-disabled
        fi

        echo "Patching staging firewall.."
        gcloud compute firewall-rules update $STAGING_ALLOW_TAG \
              --source-ranges $STAGING_IP,$TEMP_IP \
              --allow tcp:$STAGING_CUSTOM_SSH_PORT
        echo "Done patching staging firewall.."


